Parameters:
  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [test, prod]
    ConstraintDescription: must be test or prod

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI from SSM Parameter Store

Mappings:
  EnvironmentToInstanceType:
    test:
      instanceType: t2.nano
    prod:
      instanceType: t2.micro

Resources:
  # Create a VPC
  HittVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: FridayHITT_VPC
  
  # Create a Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HittVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""] # (index 0) from the list returned by !GetAZs 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Create a Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HittVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""] 
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: HITT_InternetGateway

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HittVPC
      InternetGatewayId: !Ref InternetGateway


  # Create a Route Table for the Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HittVPC
      Tags:
        - Key: Name
          Value: HITT_PublicRouteTable

  # Create route for Public Subnet to Allow Internet-Access
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Associate public subnet with the Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

        
  
  
  # WebServer:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     # !Ref EnvironmentName references the parameter above (Test or Prod)
  #     InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
  #     ImageId: !Ref ImageId
