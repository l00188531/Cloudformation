Parameters:
  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [test, prod]
    ConstraintDescription: must be test or prod
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access.

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI from SSM Parameter Store

Mappings:
  EnvironmentToInstanceType:
    test:
      instanceType: t2.nano
    prod:
      instanceType: t2.micro

Resources:
  # Create a VPC
  HittVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: FridayHITT_VPC
  
  # Create a Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HittVPC
      CidrBlock: "10.0.1.0/24"
      # (index 0) from the list returned by !GetAZs 
      AvailabilityZone: !Select [0, !GetAZs ""] 
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Create a Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HittVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""] 
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: HITT_InternetGateway

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HittVPC
      InternetGatewayId: !Ref InternetGateway

  #--------***************************************---------------------------------------

    # Allocate Elastic IP for NAT Gateway
  ElasticIPForNAT:
    Type: AWS::EC2::EIP

  # Create NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt ElasticIPForNAT.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: HITT_NATGateway
#-----------------**********************************************************************----------




  # Create a Route Table for the Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HittVPC
      Tags:
        - Key: Name
          Value: HITT_PublicRouteTable

  # Create route for Public Subnet to Allow Internet-Access
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      

  # Associate public subnet with the Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Create Route Table for the Private Subnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HittVPC
      Tags:
        - Key: Name
          Value: HITT_PrivateRouteTable
  # Add a route for private subnet to go through NAT Gateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway
    
  
  # Associate Private Subnet with the Private Route Table
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable


  # Security Group for Public Subnet
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP & SSH traffic from anywhere
      VpcId: !Ref HittVPC
      SecurityGroupIngress:
        # Allow SSH access from anywhere(port 22)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # Allow HTTP access from anywhere (port 80)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # Allow all outbound traffic
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PublicSecurityGroup
# Security Group for private Subnet
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internal traffic from the public security group
      VpcId: !Ref HittVPC
      SecurityGroupIngress:
        # Allow internal traffic from the public security group
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          # allows inbound traffic from the Bastion Security Group:
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
        # Allow all outbound traffic
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PrivateSecurityGroup

  # Security Group for Bastion server
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Bastion host
      VpcId: !Ref HittVPC
      SecurityGroupIngress:
        # Allow traffic on port 22
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          #SourceSecurityGroupId: !Ref BastionSecurityGroup
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: BastionSecurityGroup
  
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      # !Ref EnvironmentName references the parameter above (Test or Prod)
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      SubnetId: !Ref PublicSubnet        
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: PublicServer  
  # Create Backend server
  BackendServer:
    Type: AWS::EC2::Instance
    Properties:
      # !Ref EnvironmentName references the parameter above (Test or Prod)
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      SubnetId: !Ref PrivateSubnet
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: PrivateServer
  
  # Create Bastion Server
  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      # !Ref EnvironmentName references the parameter above (Test or Prod)
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: BastionServer

Outputs:
  BastionServerIP:
    Description: The Bastion Server IP Address
    Value: !GetAtt BastionServer.PublicIp
  BackendServerIP:
    Description: The backend server IP Address
    Value: !GetAtt BackendServer.PrivateIp
  ConnectionCMD:
    Value:
      !Join [
        "",
        [
          ssh -A -J ec2-user@,
          !GetAtt BastionServer.PublicIp,
          " ",
          ec2-user@,
          !GetAtt BackendServer.PrivateIp,
        ],
      ]
    Description: Copy and run it in your shell
    # ssh -i Downloads/mykeypir.pem ec2
    # ssh-add mykeypir.pem

# Check If the Agent Is Running to list the keys it holds
# ssh-add -l

# Ensure Permissions on the Private Key File
# chmod 400 mykeypair.pem

# Start the SSH Agent
# If the SSH agent is not running, we need to start it first.
# For Linux/macOS:
# eval "$(ssh-agent -s)"

# For Windows (Git Bash):
# eval $(ssh-agent -s)

# Add private Key
# ssh-add mykeypair.pem
